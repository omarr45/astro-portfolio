---
title: Flexbox or grid
date: '2023-08-25'
draft: true
author: Omar AbdulRahman
isArabic: false
categories:
  - Development
---
Creating modern, responsive, and visually appealing layouts is at the heart of web design. CSS offers two powerful layout techniques—Flexbox and Grid—that can make this task much more manageable. Rather than directly comparing them, let's explore practical tips and tricks for determining when to use Flexbox and Grid Layout in your web projects.

## Who controls the size?

The most important question to ask is: Who should control the children's size? If the answer is the parent, then almost all the time `grid` will be the most suitable. On the other hand, if we want the children to control the flow of the component, then probably it'll be `flexbox` to the go.

Let's see some examples!

#### E-commerce Products

> In this simple example, we don't really care about the content of the cards, just how we will display them next to each other.

![Screenshot from StiqaStore.com](../../assets/blog/flexbox-or-grid/ecommerce.png)

So, here we have a list of cards, and we want to display those cards in the format shown above.

It's very easy, as we want the list to control how the cards are displayed, It's as if the list is saying ***"You go next to each other, and you all have to have the same size!"***.

So, we shall use a display `grid`, to let the parent decide the size of the children

#### Tags

Let's imagine we have a project, that has some categories or tags and we want to show them next to each other.

![Project tags: Open Source, ReactJS, TailwindCSS, Design System, Dark Mode](../../assets/blog/flexbox-or-grid/tags.png)

In this example, we don't want all the tags to have the same size. It's as if the list is saying ***"Okay, you go next to each other. But figure out how to do it yourselves, I don't really care".*** So, now we should use `display:flex`.

#### Features Section

Think of a landing page of a SaaS, and we want to implement this section where we list some features or selling points.

![Features Section](../../assets/blog/flexbox-or-grid/image.png)

Tbh, previously I would implement something like this with a flex box, just throw

## Conclusion

You may be asking yourself: "But I could do some of the examples you mentioned above using the opposite choice!", and you'd be 100% right. But you'll be adding too much unnecessary headache to yourself.

This is because once we set the parent to be a **grid**; we just specify the `template-rows` and/or `template-columns`, and automatically all the children will stick to the grid system we specified. But if we set the parent to **flex**, we will need to go to each child and set `flex-basis` to them and modify the `flex-grow` and `flex-shrink` properties to get them the exact size you want. So it's just the easier implementation.
